;;; Generated by hand in NASM.  These should all make sense once the module is complete.
;;; Roughly matching these examples: https://www.pagetable.com/c64ref/6502/?tab=2#

;;; ADC
        db 0x69                 ;ADC #0xff
        db 0xFF                 ;immediate

        db 0x6D                 ;ADC @0xdead
        db 0xad, 0xde           ;absolute
	
        db 0x7d			;ADC @0xdead,X
	db 0xad, 0xde

	db 0x79			;ADC @0xdead,Y
	db 0xad, 0xde

	
	db 0x65, 0x35		;ADC @$35
	db 0x75, 0x35           ;ADC @0x35, X

	db 0x61, 0x35		;ADC (@0x35,X)
	db 0x71, 0x35		;ADC (@0x35),Y

;;; AND -- And with Accumulator
	db 0x29, 0xff		;AND #0xff
	db 0x2d, 0xad, 0xde	;AND $0xdead
	db 0x3d, 0xad, 0xde	;AND $0xdead, X
	db 0x39, 0xad, 0xde	;AND $0xdead, Y
	db 0x25, 0x35		;AND $0x35
	db 0x35, 0x35         	;AND $0x35, X
	db 0x21, 0x35		;AND ($0x35, X)
	db 0x31, 0x35 		;AND ($0x35), Y

;;; ASL
	db 0x0a			; ASL A
	db 0x0e, 0xad, 0xde	; ASL $0xdead
	db 0x1e, 0xad, 0xde	; ASL $0xdead, x
	db 0x06, 0x35		; asl $0x35
	db 0x16, 0x35		; asl $0x35, x

;;; Branch on Carry Clear
	db 0x90, 0x00
;;; Branch on Carry Set
	db 0xb0, 0x00
;;; Branch on Result Zero
	db 0xf0, 0x00

;;; Bit Immediate Test with accumulator
	db 0x2c, 0xad, 0xde	; Absolute
	db 0x24, 0x35		; Zero Page

;;; Branch on Result Minus
	db 0x30, 0x00
;;; Branch on Result Not Zero
	db 0xd0, 0x00
;;; Branch on Result Plus
	db 0x10, 0x00

;;; Break Command
	db 0x00

;;; Branch on Overflow Clear
	db 0x50, 0x00
;;; Branch on Overflow Set
	db 0x70, 0x00

;;; Clear Carry Flag
	db 0x18
;;; Clear Decimal Mode
	db 0xd8
;;; Clear Interupt Disable
	db 0x58
;;; Clear Overflow Flag
	db 0xb8


;;; CMP -- Compare Memory and Accumulator
	db 0xc9, 0xff		;CMP #0xff
	db 0xcd, 0xad, 0xde	;CMP $0xdead
	db 0xdd, 0xad, 0xde	;CMP $0xdead, X
	db 0xd9, 0xad, 0xde	;CMP $0xdead, Y
	db 0xc5, 0x35		;CMP $0x35
	db 0xd5, 0x35         	;CMP $0x35, X
	db 0xc1, 0x35		;CMP ($0x35, X)
	db 0xd1, 0x35 		;CMP ($0x35), Y

;;; CPX -- Compare Index Register X to Memory
	db 0xe0, 0x35
	db 0xec, 0xad, 0xde
	db 0xe4, 0x35
;;; CPY -- Compare Index Register Y to Memory
	db 0xc0, 0x35
	db 0xcc, 0xad, 0xde
	db 0xc4, 0x35
	
;;; Decrement Memory by One
	db 0xce, 0xad, 0xde	; Absolute
	db 0xde, 0xad, 0xde	; X-indexed Absolute
	db 0xc6, 0x35		; Zero-page
	db 0xd6, 0x35		; X-indexed Zero Page

;;; DEX -- Decrement Index Register X by One
	db 0xca
;;; DEY -- Decrement Index Register Y by One
	db 0x88

;;; EOR -- Exclude OR Memory with Accumulator
	db 0x49, 0xff		;EOR #0xff
	db 0x4d, 0xad, 0xde	;EOR $0xdead
	db 0x5d, 0xad, 0xde	;EOR $0xdead, X
	db 0x59, 0xad, 0xde	;EOR $0xdead, Y
	db 0x45, 0x35		;EOR $0x35
	db 0x55, 0x35         	;EOR $0x35, X
	db 0x41, 0x35		;EOR ($0x35, X)
	db 0x51, 0x35 		;EOR ($0x35), Y

;;;  INC -- Increment Memory by One
	db 0xee, 0xad, 0xde	;Absolute
	db 0xfe, 0xad, 0xde	;X-indexed Absolute
	db 0xe6, 0x35		;Zero page
	db 0xf6, 0x35		;X-indexed Zero Page

;;; INX -- Increment X by One
	db 0xe8
;;; INY -- Increment Y by One
	db 0xc8

;;; JMP -- Jump
	db 0x4c, 0xad, 0xde	; Absolute           jmp 0xdead
	db 0x6c, 0xad, 0xde	; Absolute Indirect  jmp (0xdead)

;;; JSR -- Jump to Subroutine
	db 0x20, 0xad, 0xde	; Absolute           jsr 0xdead


;;; LDA -- Load Accumulator with Memory
	db 0xa9, 0xff		;LDA #0xff
	db 0xad, 0xad, 0xde	;LDA $0xdead
	db 0xbd, 0xad, 0xde	;LDA $0xdead, X
	db 0xb9, 0xad, 0xde	;LDA $0xdead, Y
	db 0xa5, 0x35		;LDA $0x35
	db 0xb5, 0x35         	;LDA $0x35, X
	db 0xa1, 0x35		;LDA ($0x35, X)
	db 0xb1, 0x35 		;LDA ($0x35), Y


;;; LDX -- Load Index Register X from Memory
	db 0xa2, 0x35		; Immediate   ldx #0x00
	db 0xae, 0xad, 0xde	; Absolute    ldx 0xdead
	db 0xbe, 0xad, 0xde	; Y-Absolute  ldx 0xdead, Y
	db 0xa6, 0x35		; Zero-page   ldx 0x00
	db 0xb6, 0x35		; Y-Zero-page ldx 0x00, y
	
;;; LDY -- Load Index Register Y from Memory
	db 0xa0, 0x35		; Immediate   ldy #0x00
	db 0xac, 0xad, 0xde	; Absolute    ldy 0xdead
	db 0xbc, 0xad, 0xde	; Y-Absolute  ldy 0xdead, x
	db 0xa4, 0x35		; Zero-page   ldy 0x00
	db 0xb4, 0x35		; Y-Zero-page ldy 0x00, x
	
;;; LSR -- Logical Shift Right
	db 0x4a			; Accumulator lsr a
	db 0x4e, 0xad, 0xde	; Absolute    lsr 0xdead
	db 0x5e, 0xad, 0xde	; X-Absolute  lsr 0xdead, x
	db 0x46, 0x35		; Zero-page   lsr 0x00
	db 0x56, 0x35		; X-Zero-page lsr 0x00, x

;;; NOP -- No Operation
	db 0xea			; NOP

	
;;; ORA -- Or with Accumulator
	db 0x09, 0xff		;ORA #0xff
	db 0x0d, 0xad, 0xde	;ORA $0xdead
	db 0x1d, 0xad, 0xde	;ORA $0xdead, X
	db 0x19, 0xad, 0xde	;ORA $0xdead, Y
	db 0x05, 0x35		;ORA $0x35
	db 0x15, 0x35         	;ORA $0x35, X
	db 0x01, 0x35		;ORA ($0x35, X)
	db 0x11, 0x35 		;ORA ($0x35), Y

;;; Stack Operations
	db 0x48			; PHA -- Push Accumulator on Stack
	db 0x08			; PHP -- Push Processor Status on Stack
	db 0x68			; PLA -- Pull Accumulator from Stack
	db 0x28			; PLP -- Pull Processor Status from Stack


;;; Rotate Left
	db 0x2a			; Accumulator rol a
	db 0x2e, 0xad, 0xde	; Absolute    rol 0xdead
	db 0x3e, 0xad, 0xde	; X-Absolute  rol 0xdead, x
	db 0x26, 0x35		; Zero-page   rol 0x00
	db 0x36, 0x35		; X-Zero-page rol 0x00, x

;;; Rotate Right
	db 0x6a			; Accumulator ror a
	db 0x6e, 0xad, 0xde	; Absolute    ror 0xdead
	db 0x7e, 0xad, 0xde	; X-Absolute  ror 0xdead, x
	db 0x66, 0x35		; Zero-page   ror 0x00
	db 0x76, 0x35		; X-Zero-page ror 0x00, x

;;; RTI -- Return from Interrupt
	db 0x40			; rti
;;; RTS -- Return from Subroutine
	db 0x60			; rts


;;; SBC -- Subtract Memory from Accumulator with Borrow
	db 0xe9, 0xff		;SBC #0xff
	db 0xed, 0xad, 0xde	;SBC $0xdead
	db 0xfd, 0xad, 0xde	;SBC $0xdead, X
	db 0xf9, 0xad, 0xde	;SBC $0xdead, Y
	db 0xe5, 0x35		;SBC $0x35
	db 0xf5, 0x35         	;SBC $0x35, X
	db 0xe1, 0x35		;SBC ($0x35, X)
	db 0xf1, 0x35 		;SBC ($0x35), Y

;;; SEC -- Set Carry Flag
	db 0x38			; sec
;;; SED -- Set Decimal Mode
	db 0xf8			; sed
;;; SEI -- Set Interrupt Disable
	db 0x78			; sei

;;; STA -- Store Accumulator in Memory
	db 0x8d, 0xad, 0xde	;STA $0xdead
	db 0x9d, 0xad, 0xde	;STA $0xdead, X
	db 0x99, 0xad, 0xde	;STA $0xdead, Y
	db 0x85, 0x35		;STA $0x35
	db 0x95, 0x35         	;STA $0x35, X
	db 0x81, 0x35		;STA ($0x35, X)
	db 0x91, 0x35 		;STA ($0x35), Y

;;; STX -- Store Index Register X to Memory
	db 0x8e, 0xad, 0xde	; STX 0xdead
	db 0x86, 0x35		; STX 0x35
	db 0x96, 0x35		; STX 0x35, Y
;;; STY -- Store Index Register Y to Memory
	db 0x8c, 0xad, 0xde	; STY 0xdead
	db 0x84, 0x35		; STY 0x35
	db 0x94, 0x35		; STY 0x35, X


;;; Transfer instructions.
	db 0xaa			;tax -- Transfer Accumulator to Index X
	db 0xa8			;tay -- Transfer Accumulator to Index Y
	db 0xba			;tsx -- Transfer Stack Pointer to X
	db 0x8a			;txa -- Transfer X to Accumulator
	db 0x9a			;txs -- Transfer Index X to Stack Pointer
	db 0x98			;tya -- Transfer Index Y to Accumulator
	
	
;;; End of buffer.
	db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff

	
